#!/usr/bin/env python

### APPLYING OCETRAC TO CESM2 CHILD DATASET
##### LOADING IN PACKAGES
import s3fs; import xarray as xr; import numpy as np
import pandas as pd; import dask.array as da; import ocetrac

import matplotlib.pyplot as plt; import cartopy.crs as ccrs

import warnings; import expectexception
warnings.filterwarnings('ignore')

import netCDF4 as nc; import datetime as dt
import scipy

##### LOADING IN FILE
ncfile = '/Users/cassiacai/Desktop/CESM-child-datasets/outfile.nc' #an aggregate of child datasets 1850 to 2014
ds = xr.open_mfdataset(ncfile,parallel=True)
print(ds.SST)

##### DECOMPOSE SST
sst = ds.SST
sst.load()

### Decompose SST maps into mean, trend, annual, and semi-annual harmonics
## Use least-squares regression and solve for model coefficients
dyr = sst.time.dt.year + (sst.time.dt.month-0.5)/12

# Our 6 coefficient model is composed of the mean, trend, annual sine and cosine harmonics, & semi-annual sine and cosine harmonics
model = np.array([np.ones(len(dyr))] + [dyr-np.mean(dyr)] + [np.sin(2*np.pi*dyr)] + [np.cos(2*np.pi*dyr)] + [np.sin(4*np.pi*dyr)] + [np.cos(4*np.pi*dyr)])

# Take the pseudo-inverse of model to 'solve' least-squares problem
pmodel = np.linalg.pinv(model)

# Convert model and pmodel to xaray DataArray
model_da = xr.DataArray(model.T, dims=['time','coeff'], coords={'time':sst.time.values, 'coeff':np.arange(1,7,1)}) 
pmodel_da = xr.DataArray(pmodel.T, dims=['coeff','time'], coords={'coeff':np.arange(1,7,1), 'time':sst.time.values})

# resulting coefficients of the model
sst_mod = xr.DataArray(pmodel_da.dot(sst), dims=['coeff','lat','lon'], coords={'coeff':np.arange(1,7,1), 'lat':sst.lat.values, 'lon':sst.lon.values})

# Make a quick plot of the decomposition at a specific location
# Construct mean, trend, and seasonal cycle
mean = model_da[:,0].dot(sst_mod[0,:,:])
trend = model_da[:,1].dot(sst_mod[1,:,:])
seas = model_da[:,2:].dot(sst_mod[2:,:,:])

# compute anomalies by removing all  the model coefficients 
ssta_notrend = sst-model_da.dot(sst_mod) #this is anomalies

##### FEATURE THRESHOLDING
# ------------------------------------------------------------------------------------ DETRENDING - Method 1
### Source code from here: https://gist.github.com/rabernat/1ea82bb067c3273a6166d1b1f77d490f
def detrend_dim(da, dim, deg=1):
    # detrend along a single dimension
    p = da.polyfit(dim=dim, deg=deg)
    fit = xr.polyval(da[dim], p.polyfit_coefficients)
    return da - fit

def detrend(da, dims, deg=1):
    # detrend along multiple dimensions only valid for linear detrending (deg=1)
    da_detrended = da
    for dim in dims:
        da_detrended = detrend_dim(da_detrended, dim, deg=deg)
    return da_detrended
    
detrended = detrend_dim(ds.SST, dim='time')
print(detrended)
print(detrended.shape)

# ------------------------------------------------------------------------------------ DETRENDING - Method 2
# detrended = scipy.signal.detrend(ds.SST, axis=0)

# ------------------------------------------------------------------------------------ DETRENDING - Method 3
## Use xscale (but running into some problems with dim)
## import xscale
## xscale.signal.fitting.detrend(ds.SST, dim='time', type='linear') # dim = time does not work
## ds.SST.dims # output is: ('time', 'lat', 'lon')

detrended = ssta_notrend

monthly = ds.groupby('time.month').mean('time') # monthly climatology that includes climate change signal
print(monthly.SST.isel(month=0))

monthly_clim_detrended = detrended.groupby('time.month').mean('time') # monthly climatology after detrending
print(monthly_clim_detrended.isel(month=0))

# print(monthly)  # Dimensions:  (lat: 192, lon: 288, month: 12)
# print(monthly_clim_detrended) # Dimensions:  (lat: 192, lon: 288, month: 12)

result = ds.groupby('time.month') - monthly #this is the anomaly that includes climate change signal
# print(result) # Dimensions:  (lat: 192, lon: 288, time: 1980)

result_detrended = ds.SST.groupby('time.month') - monthly_clim_detrended #anomalies # CHECK THIS
# print(result_detrended) # Dimensions: (time: 1980, lat: 192, lon: 288)

##### EXAMPLE PLOTS
monthed = 5
inKel = monthly.SST.isel(month=monthed)
inKel.plot(levels=[240,250,260,270,280,290,300,310])
monthly.SST.isel(month=monthed).where(monthly.SST.isel(month=monthed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

plt.hist(inKel)
plt.show()

# Other plots 
timed = 800
results_inC = result.SST.isel(time=timed)
results_inC.plot(levels=[-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3,3.5,4])
result.SST.isel(time=timed).where(result.SST.isel(time=timed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

results_inC_detrended = detrended.isel(time=timed)
results_inC_detrended.plot(levels=[-5,-4,-3,-2,-1,0,1,2,3,4,5])
detrended.isel(time=timed).where(detrended.isel(time=timed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

###### THRESHOLD and FEATURES
if detrended.chunks:
    detrended = detrended.chunk({'time': -1})
    print(detrended)

threshold = detrended.groupby('time.month').quantile(0.9,dim=('time')) 
features_ssta = detrended.where(detrended>=threshold, other=np.nan) 

print(threshold.shape)
print(features_ssta.shape)

%%time
features_ssta= features_ssta[:,:,:,:].load()

##### EXAMPLE PLOTS
month_choice = 1
sample_month = features_ssta.isel(month=month_choice)
timed = 190
print(np.nanmin(sample_month.isel(time=timed)))
print(np.nanmax(sample_month.isel(time=timed)))
print(np.nanmean(sample_month.isel(time=timed)))

plt.hist(sample_month.isel(time=0))

print(features_ssta.shape)

inKel = sample_month[timed,:,:]
inKel.plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0],cmap='Reds')
sample_month.isel(time=timed).where(sample_month.isel(time=timed)==0.0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

##### MASKING
full_mask_land = features_ssta
full_masked = full_mask_land.where(full_mask_land != 0)
print(full_masked.shape)

full_masked[0,:,:,0].plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0,2.25,2.5],cmap='Reds') # trying this

full_masked[1978,:,:,0].plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0,2.25,2.5],cmap='Reds') # trying this

binary_out_afterlandmask=np.isfinite(full_masked)
print(binary_out_afterlandmask.shape)

binary_out_afterlandmask[timed,:,:,month_choice].plot()

newmask = np.isfinite(ds.SST.isel(time=timed)) #------------------------------------------------------------------------- Not really what I'm looking for...
newmask.plot()

%%time
Tracker = ocetrac.Tracker(binary_out_afterlandmask[:,:,:,5], newmask, radius=8, min_size_quartile=0.75, timedim = 'time', xdim = 'lon', ydim='lat', positive=True)
blobs = Tracker.track()

blobs.attrs

##### PLOTTING #--------------------------------------------------------------------------------------------- Plots do not really match... needs correction...
from matplotlib.colors import ListedColormap
maxl = int(np.nanmax(blobs.values))
cm = ListedColormap(np.random.random(size=(maxl, 3)).tolist())

timed = 25
plt.figure(figsize=(16,3))
ax1 = plt.subplot(121);blobs.isel(time=timed).plot(cmap= cm)
sample_month.isel(time=timed).where(sample_month.isel(time=timed)==0.0).plot.contourf(colors='k', add_colorbar=False)

ax2 = plt.subplot(122); 
full_masked[timed,:,:,0].plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0,2.25,2.5],cmap='Reds')
sample_month.isel(time=timed).where(sample_month.isel(time=timed)==0.0).plot.contourf(colors='k', add_colorbar=False)
