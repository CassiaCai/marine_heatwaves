#!/usr/bin/env python

### APPLYING OCETRAC TO CESM2 CHILD DATASET
##### LOADING IN PACKAGES
import s3fs; import xarray as xr; import numpy as np
import pandas as pd; import dask.array as da; import ocetrac

import matplotlib.pyplot as plt; import cartopy.crs as ccrs

import warnings; import expectexception
warnings.filterwarnings('ignore')

import netCDF4 as nc; import datetime as dt
import scipy

##### LOADING IN FILE
ncfile = '/Users/cassiacai/Desktop/CESM-child-datasets/outfile.nc' #an aggregate of child datasets 1850 to 2014
ds = xr.open_mfdataset(ncfile,parallel=True)
print(ds.SST)

##### FEATURE THRESHOLDING
# ------------------------------------------------------------------------------------ DETRENDING - Method 1
### Source code from here: https://gist.github.com/rabernat/1ea82bb067c3273a6166d1b1f77d490f
def detrend_dim(da, dim, deg=1):
    # detrend along a single dimension
    p = da.polyfit(dim=dim, deg=deg)
    fit = xr.polyval(da[dim], p.polyfit_coefficients)
    return da - fit

def detrend(da, dims, deg=1):
    # detrend along multiple dimensions only valid for linear detrending (deg=1)
    da_detrended = da
    for dim in dims:
        da_detrended = detrend_dim(da_detrended, dim, deg=deg)
    return da_detrended
    
detrended = detrend_dim(ds.SST, dim='time')
print(detrended)
print(detrended.shape)

# ------------------------------------------------------------------------------------ DETRENDING - Method 2
# detrended = scipy.signal.detrend(ds.SST, axis=0)

# ------------------------------------------------------------------------------------ DETRENDING - Method 3
## Use xscale (but running into some problems with dim)
## import xscale
## xscale.signal.fitting.detrend(ds.SST, dim='time', type='linear') # dim = time does not work
## ds.SST.dims # output is: ('time', 'lat', 'lon')

monthly = ds.groupby('time.month').mean('time') # monthly climatology that includes climate change signal
print(monthly.SST.isel(month=0))

monthly_clim_detrended = detrended.groupby('time.month').mean('time') # monthly anomalies from detrend
print(monthly_clim_detrended.isel(month=0))

# print(monthly)  # Dimensions:  (lat: 192, lon: 288, month: 12)
# print(monthly_clim_detrended) # Dimensions:  (lat: 192, lon: 288, month: 12)

result = ds.groupby('time.month') - monthly #this is the anomaly that includes climate change signal
# print(result) # Dimensions:  (lat: 192, lon: 288, time: 1980)

print(detrended.shape) #anomalies
print(monthly_clim_detrended.shape) #monthly climatology of anomalies

##### EXAMPLE PLOTS
monthed = 0
inCelsius = monthly.SST.isel(month=monthed)-273.15
inCelsius.plot(levels=[-35,-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30,35])
monthly.SST.isel(month=monthed).where(monthly.SST.isel(month=monthed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

inCelsius_detrended = monthly_clim_detrended.isel(month=monthed)
inCelsius_detrended.plot(levels=[-5,-4,-3,-2,-1,0,1,2,3,4,5])
monthly_clim_detrended.isel(month=monthed).where(monthly_clim_detrended.isel(month=monthed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

# Plot of anomaly and anomaly_detrended for one month 
timed = 800
results_inC = result.SST.isel(time=timed)
results_inC.plot(levels=[-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3,3.5,4])
result.SST.isel(time=timed).where(result.SST.isel(time=timed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

results_inC_detrended = detrended.isel(time=timed)
results_inC_detrended.plot(levels=[-5,-4,-3,-2,-1,0,1,2,3,4,5])
detrended.isel(time=timed).where(detrended.isel(time=timed)==0).plot.contourf(colors='k', add_colorbar=False)
plt.show()

##### FROM HILLARY'S CODE
if detrended.chunks:
    detrended = detrended.chunk({'time': -1})
    print(detrended)

threshold = detrended.groupby('time.month').quantile(0.9,dim=('time')) 
features_ssta = detrended.where(detrended>=threshold, other=np.nan) 

print(threshold.shape)
print(features_ssta.shape)

%%time
features_ssta= features_ssta[:,:,:,:].load()

##### EXAMPLE PLOTS
month_choice = 1
sample_month = features_ssta.isel(month=month_choice)

print(np.nanmin(sample_month.isel(time=0)))
print(np.nanmax(sample_month.isel(time=0)))
print(np.nanmean(sample_month.isel(time=0)))

sample_month[190,:,:].plot()
#sample_month.isel(time=189).plot() # another way to plot
