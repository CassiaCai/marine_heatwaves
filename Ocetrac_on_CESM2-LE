#!/usr/bin/env python

##### LOADING IN PACKAGES #--------------------------------------------------------------
import s3fs; import xarray as xr; import numpy as np
import pandas as pd; 
import dask.array as da
import ocetrac

import matplotlib.pyplot as plt; import cartopy.crs as ccrs

import warnings; import expectexception
warnings.filterwarnings('ignore')

import netCDF4 as nc; import datetime as dt
import scipy

import intake; import pprint
# Allow multiple lines per cell to be displayed without print (default is just last line)
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
# Enable more explicit control of DataFrame display (e.g., to omit annoying line numbers)
from IPython.display import HTML

##### DOMAIN FILE (FOR LAND MASK) #-------------------------------------------------------
fname = '/glade/p/cesm/cseg/inputdata/share/domains/domain.lnd.fv0.9x1.25_gx1v7.151020.nc'
DS=xr.open_dataset(fname)

frac = DS.frac
# DS.frac.plot()
ocn = frac.where(frac == 0.)
afterlandmask=np.isfinite(ocn)
afterlandmask.plot()

# Open original collection description file #----------------------------------------------
cat_url_orig = '/glade/collections/cmip/catalog/intake-esm-datastore/catalogs/glade-cesm2-le.json'
coll_orig = intake.open_esm_datastore(cat_url_orig)
subset = coll_orig.search(component='atm',variable='SST',frequency='month_1')
subset.df #2489 rows

subset = coll_orig.search(component='atm',variable='SST',frequency='month_1',experiment='historical',member_id= 'r1i1001p1f1')
subset.df #looking at one ensemble member










---------------------------------------------------------------------------------------------------------------- review everything below this point
# Making land mask from a land file
df = coll_orig.search(component='lnd',frequency='daily').df
col_subset = coll_orig.search(frequency=["monthly"], component="lnd", variable='SOILWATER_10CM')
dsets_land = col_subset.to_dataset_dict(zarr_kwargs={"consolidated": True}, storage_options={"anon": True})
print(f"\nDataset dictionary keys:\n {dsets.keys()}")

land_20C = dsets_land['lnd.CTRL.monthly'].SOILWATER_10CM

print(type(land_20C[0,0,:,:]))
print(land_20C[0,0,:,:])

full_mask_land = land_20C[0,0,:,:]
full_masked = full_mask_land.where(full_mask_land != np.nan)

afterlandmask=np.isfinite(full_masked)
afterlandmask.plot()

# Loading in atmospheric data
df = coll_orig.search(component='atm', frequency = 'monthly', experiment = '20C',variable='T').df
HTML(df.to_html(index=False))

col_subset = coll_orig.search(frequency=["monthly"], component="atm", variable='T')
col_subset.df
# Load catalog entries for subset into a dictionary of xarray datasets
dsets = col_subset.to_dataset_dict(zarr_kwargs={"consolidated": True}, storage_options={"anon": True})
print(f"\nDataset dictionary keys:\n {dsets.keys()}")

print(dsets)

# Define Xarray datasets corresponding to the three experiments
ds_20C = dsets['atm.20C.monthly']
ds_RCP85 = dsets['atm.RCP85.monthly']

# Use Dask.Distributed utility function to display size of each dataset
from distributed.utils import format_bytes
print(f"20th Century: {format_bytes(ds_20C.nbytes)}\n"
      f"RCP8.5: {format_bytes(ds_RCP85.nbytes)}")

t_20c = ds_20C.T
t_rcp = ds_RCP85.T
t_20c

t_20c_new = t_20c.isel(lev=29)[:,:,:,:]
t_rcp_new = t_rcp.isel(lev=29)[:,:,:,:]

SST = t_20c_new.T[:,:,:,0]

print(SST)

SST.load()
SST.shape

### Decompose SST maps into mean, trend, annual, and semi-annual harmonics
## Use least-squares regression and solve for model coefficients
dyr = SST.time.dt.year + (SST.time.dt.month-0.5)/12

# Our 6 coefficient model is composed of the mean, trend, annual sine and cosine harmonics, & semi-annual sine and cosine harmonics
model = np.array([np.ones(len(dyr))] + [dyr-np.mean(dyr)] + [np.sin(2*np.pi*dyr)] + [np.cos(2*np.pi*dyr)] + [np.sin(4*np.pi*dyr)] + [np.cos(4*np.pi*dyr)])

# Take the pseudo-inverse of model to 'solve' least-squares problem
pmodel = np.linalg.pinv(model)

# Convert model and pmodel to xaray DataArray
model_da = xr.DataArray(model.T, dims=['time','coeff'], coords={'time':SST.time.values, 'coeff':np.arange(1,7,1)}) 
pmodel_da = xr.DataArray(pmodel.T, dims=['coeff','time'], coords={'coeff':np.arange(1,7,1), 'time':SST.time.values})

pmodel_da.shape

# resulting coefficients of the model
sst_mod = xr.DataArray(pmodel_da.dot(SST), dims=['coeff','lon','lat'], coords={'coeff':np.arange(1,7,1), 'lon':SST.lon.values, 'lat':SST.lat.values})

# Construct mean, trend, and seasonal cycle
mean = model_da[:,0].dot(sst_mod[0,:,:])
trend = model_da[:,1].dot(sst_mod[1,:,:])
seas = model_da[:,2:].dot(sst_mod[2:,:,:])

# compute anomalies by removing all  the model coefficients 
ssta_notrend = SST-model_da.dot(sst_mod) #this is anomalies

transp_ssta_notrend = ssta_notrend.transpose()
transp_mean = mean.transpose()
transp_trend = trend.transpose()
transp_seas = seas.transpose()

dif_try = trend[7,:,:]-trend[0,:,:]
dif_try.transpose().plot(cmap='seismic')
