#!/usr/bin/env python

##### LOADING IN PACKAGES #--------------------------------------------------------------
import s3fs; import xarray as xr; import numpy as np; import pandas as pd; 
import dask.array as da; import ocetrac; import matplotlib.pyplot as plt; import cartopy.crs as ccrs
import warnings; import expectexception
warnings.filterwarnings('ignore')
import netCDF4 as nc; import datetime as dt; import scipy; import intake; import pprint
# Allow multiple lines per cell to be displayed without print (default is just last line)
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
# Enable more explicit control of DataFrame display (e.g., to omit annoying line numbers)
from IPython.display import HTML

# OPEN FILES #---------------------------------------------------------------------------
cat_url_orig = '/glade/collections/cmip/catalog/intake-esm-datastore/catalogs/glade-cesm2-le.json'
coll_orig = intake.open_esm_datastore(cat_url_orig)
subset = coll_orig.search(component='atm',variable='SST',frequency='month_1',experiment='historical',member_id= 'r1i1001p1f1') #here I picked one member
subset.df 

# Load catalog entries for subset into a dictionary of xarray datasets
dsets = subset.to_dataset_dict(zarr_kwargs={"consolidated": True}, storage_options={"anon": True})
print(f"\nDataset dictionary keys:\n {dsets.keys()}")

ds = dsets['atm.historical.cam.h0.cmip6.SST']
SST = ds.SST; SST.load()

# DETRENDING #---------------------------------------------------------------------------
### Decompose SST maps into mean, trend, annual, and semi-annual harmonics 
## Use least-squares regression and solve for model coefficients
dyr = SST.time.dt.year + (SST.time.dt.month-0.5)/12

# Our 6 coefficient model is composed of the mean, trend, annual sine and cosine harmonics, & semi-annual sine and cosine harmonics
model = np.array([np.ones(len(dyr))] + [dyr-np.mean(dyr)] + [np.sin(2*np.pi*dyr)] + [np.cos(2*np.pi*dyr)] + [np.sin(4*np.pi*dyr)] + [np.cos(4*np.pi*dyr)])

# Take the pseudo-inverse of model to 'solve' least-squares problem
pmodel = np.linalg.pinv(model)

# Convert model and pmodel to xaray DataArray
model_da = xr.DataArray(model.T, dims=['time','coeff'], coords={'time':SST.time.values, 'coeff':np.arange(1,7,1)}) 
pmodel_da = xr.DataArray(pmodel.T, dims=['coeff','time'], coords={'coeff':np.arange(1,7,1), 'time':SST.time.values})

# resulting coefficients of the model
sst_mod = xr.DataArray(pmodel_da.dot(SST), dims=['coeff','lat','lon'], coords={'coeff':np.arange(1,7,1), 'lat':SST.lat.values, 'lon':SST.lon.values})

# Construct mean, trend, and seasonal cycle
mean = model_da[:,0].dot(sst_mod[0,:,:])
trend = model_da[:,1].dot(sst_mod[1,:,:])
seas = model_da[:,2:].dot(sst_mod[2:,:,:])

# compute anomalies by removing all  the model coefficients 
ssta_notrend = SST-model_da.dot(sst_mod) #this is anomalies

detrended = ssta_notrend

###### THRESHOLD and FEATURES
if detrended.chunks:
    detrended = detrended.chunk({'time': -1})
      
threshold = detrended.groupby('time.month').quantile(0.9,dim=('time')) 
features_ssta = detrended.where(detrended.groupby('time.month')>=threshold, other=np.nan)

%%time
features_ssta= features_ssta[:,:,:].load()

##### MASKING
full_mask_land = features_ssta
full_masked = full_mask_land.where(full_mask_land != 0)
binary_out_afterlandmask=np.isfinite(full_masked)

binary_out_afterlandmask[timed,:,:].plot()
newmask_1 = ds.SST.isel(member_id=0)
newmask = newmask_1.where(newmask_1 != 0)

%%time
Tracker = ocetrac.Tracker(binary_out_afterlandmask[:,:,:], newmasked[1850,:,:], radius=2, min_size_quartile=0., timedim = 'time', xdim = 'lon', ydim='lat', positive=True)
blobs = Tracker.track()

blobs.attrs

from matplotlib.colors import ListedColormap
maxl = int(np.nanmax(blobs.values))
cm = ListedColormap(np.random.random(size=(maxl, 3)).tolist())
blobs.isel(time=timed).plot(cmap= cm)

full_masked[timed,:,:].plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0,2.25,2.5],cmap='Reds')

from matplotlib.colors import ListedColormap
maxl = int(np.nanmax(blobs.values))
cm = ListedColormap(np.random.random(size=(maxl, 3)).tolist())

from matplotlib.colors import ListedColormap
maxl = int(np.nanmax(blobs.values))
cm = ListedColormap(np.random.random(size=(maxl, 3)).tolist())

timed = 1900
plt.figure(figsize=(16,3))
ax1 = plt.subplot(121)
blobs.isel(time=timed).plot(cmap= cm)
features_ssta.isel(time=timed).where(features_ssta.isel(time=timed)==0.0).plot.contourf(colors='k', add_colorbar=False)

ax2 = plt.subplot(122); 
full_masked[timed,:,:].plot(levels=[0.0,0.25,0.50,0.75,1.0,1.25,1.50,1.75,2.0,2.25,2.5],cmap='Reds')
features_ssta.isel(time=timed).where(features_ssta.isel(time=timed)==0.0).plot.contourf(colors='k', add_colorbar=False)

mo = Tracker._morphological_operations()

##### SAVING AS NETCDFS #--------------------------------------------------------------
blobs.to_netcdf("blobs_sample.nc")
detrended.to_netcdf("detrended_sample.nc")
